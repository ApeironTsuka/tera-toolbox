const mui = require('tera-toolbox-mui').DefaultInstance;
const fs = require('fs');
const path = require('path');

class Module {
    constructor(manager, moduleInfo) {
        this.manager = manager;
        this.info = moduleInfo;
        this.clientInterface = manager.clientInterface;
        this.options = moduleInfo.options;
        this.name = moduleInfo.name;
        this.niceName = this.options.niceName || moduleInfo.rawName;
        this.rootFolder = moduleInfo.path;

        // Module settings
        this.settingsVersion = this.options.settingsVersion || null;
        this.settingsFile = (this.settingsVersion === null) ? '' : path.join(this.rootFolder, this.options.settingsFile || 'module_settings.json');
        this.settingsMigrator = (this.settingsVersion === null) ? '' : path.join(this.rootFolder, this.options.settingsMigrator || 'module_settings_migrator.js');
        this.settingsAutosaveOnClose = (this.options.settingsAutosaveOnClose === undefined) ? true : this.options.settingsAutosaveOnClose;

        // Load settings
        this.loadSettings();

        // Implementation will be set later when loaded by manager
        this.instance = null;
    }

    destructor() {
        try {
            if (typeof this.instance.destructor === 'function')
                this.instance.destructor();

            if (this.settingsAutosaveOnClose)
                this.saveSettings();
        } finally {
            this.instance = null;
        }
    }

    get proxyAuthor() { return 'caali'; }
    get region() { return this.clientInterface.info.region; }
    get majorPatchVersion() { return this.clientInterface.info.majorPatchVersion; }
    get minorPatchVersion() { return this.clientInterface.info.minorPatchVersion; }

    // Module settings
    loadSettings() {
        if (this.settingsVersion === null)
            return;

        this.settings = {};

        let data = null;
        try {
            data = fs.readFileSync(this.settingsFile);
        } catch (_) {
            this.settings = this.migrateSettings(null, this.settingsVersion);
            return;
        }

        try {
            data = JSON.parse(data);
        } catch (e) {
            if (e.toString().includes('at position 0')) {
                this.error(mui.get('tera-client-interface/module/settings-load-error-corrupted-1'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-corrupted-2', { name: this.name }));
                this.error(mui.get('tera-client-interface/module/settings-load-error-corrupted-3'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-corrupted-4'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-corrupted-5'));

                this.settings = this.migrateSettings(null, this.settingsVersion);
                this.saveSettings();
                return;
            } else {
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-1', { name: this.name }));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-2'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-3'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-4'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-5'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-6'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-7', { settingsFile: this.settingsFile }));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-8'));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-9', { e }));
                this.error(mui.get('tera-client-interface/module/settings-load-error-invalid-format-10'));
                throw e;
            }
        }

        if (this.settingsVersion !== data.version) {
            this.settings = this.migrateSettings(data.version, this.settingsVersion, (data.version !== undefined && data.data !== undefined) ? data.data : data);
            return;
        }

        this.settings = data.data;
    }

    saveSettings() {
        if (this.settingsVersion === null)
            return;

        let data = null;
        try {
            data = JSON.stringify({ 'version': this.settingsVersion, 'data': this.settings }, null, 4);

            try {
                fs.writeFileSync(this.settingsFile, data);
            } catch (e) {
                this.error(mui.get('tera-client-interface/module/settings-save-error-write'));
                this.error(e);
            }
        } catch (e) {
            this.error(mui.get('tera-client-interface/module/settings-save-error-stringify'));
            this.error(e);
        }
    }

    migrateSettings(from_ver, to_ver, settings) {
        try {
            let migrator = require(this.settingsMigrator);
            try {
                return migrator(from_ver, to_ver, settings);
            } catch (e) {
                this.error(mui.get('tera-client-interface/module/settings-migrate-error-run-migrator'));
                this.error(e);
                throw e;
            }
        } catch (e) {
            this.error(mui.get('tera-client-interface/module/settings-migrate-error-load-migrator'));
            this.error(e);
            throw e;
        }
    }

    // Logging
    log(...args) { console.log(mui.get('tera-client-interface/module/prefix-log', { name: this.name }), ...args); }
    warn(...args) { console.warn(mui.get('tera-client-interface/module/prefix-warn', { name: this.name }), ...args); }
    error(...args) { console.error(mui.get('tera-client-interface/module/prefix-error', { name: this.name }), ...args); }

    // Client Interface
    queryData(...args) { return this.clientInterface.queryData(...args); }

    // GPK Mods
    installGPK(fromPath, filename = null) { return this.clientInterface.installGPK(path.join(this.info.path, fromPath), filename); }
}

module.exports = Module;
