const mui = require('tera-toolbox-mui').DefaultInstance;
const Module = require('./module');
const { isCoreModule, listModules, loadModuleInfo } = require('tera-mod-management');

function printableName(moduleInfo) {
    if (moduleInfo.options.niceName && moduleInfo.options.niceName !== moduleInfo.name)
        return `"${moduleInfo.options.niceName}" (${moduleInfo.rawName})`;
    return `"${moduleInfo.rawName}"`;
}

// Runtime module manager
class ModuleManager {
    constructor(clientInterface, rootFolder) {
        this.clientInterface = clientInterface;
        this.rootFolder = rootFolder;
        this.installedModules = new Map();
        this.loadedModules = new Map();
    }

    destructor() {
        this.unloadAll();
        this.clientInterface = null;
    }

    isInstalled(name) {
        return this.installedModules.has(name.toLowerCase());
    }

    getInfo(name) {
        return this.installedModules.get(name.toLowerCase());
    }

    isLoaded(name) {
        return this.loadedModules.has(name.toLowerCase());
    }

    get(name) {
        return this.loadedModules.get(name.toLowerCase());
    }

    isCoreModule(name) {
        const info = this.getInfo(name.toLowerCase());
        return info && isCoreModule(info);
    }

    loadAll() {
        if (!this.clientInterface)
            return;

        // List installed modules
        this.installedModules.clear();
        listModules(this.rootFolder).forEach(name => {
            // Safely load module info
            let moduleInfo;
            try {
                moduleInfo = loadModuleInfo(this.rootFolder, name);
            } catch (e) {
                console.error(mui.get('tera-client-interface/modulemanager/load-module-info-error', {name}));
                console.error(e);
                return;
            }

            if (!moduleInfo.disabled) {
                // Validate module info
                if (this.installedModules.has(moduleInfo.name))
                    console.error(mui.get('tera-client-interface/modulemanager/duplicate-mod-error', {name}));
                else
                    this.installedModules.set(moduleInfo.name, moduleInfo);
            }
        });

        // Check dependencies and conflicts
        let ModulesRemoved;
        do {
            ModulesRemoved = false;

            this.installedModules.forEach((moduleInfo, moduleName) => {
                moduleInfo.dependencies.forEach(dependency => {
                    if (!this.isInstalled(dependency)) {
                        console.error(mui.get('tera-client-interface/modulemanager/missing-mod-dependency-error', {name: printableName(moduleInfo), dependency}));
                        this.installedModules.delete(moduleName);
                        ModulesRemoved = true;
                    }
                });
            });

            this.installedModules.forEach((moduleInfo, moduleName) => {
                moduleInfo.conflicts.forEach(conflict => {
                    if (this.isInstalled(conflict)) {
                        console.error(mui.get('tera-client-interface/modulemanager/mod-conflict-error', {name: printableName(moduleInfo), conflict}));
                        this.installedModules.delete(moduleName);
                        ModulesRemoved = true;
                    }
                });
            });
        } while (ModulesRemoved);

        // Now, after checking conflicts/dependencies, filter out non-client mods
        for (let k of this.installedModules.keys()) {
            if (this.installedModules.get(k).category !== 'client')
                this.installedModules.delete(k);
        }
        
        // Load core modules first
        this.installedModules.forEach(mod => {
            if (this.isCoreModule(mod.name) && !this.isLoaded(mod.name))
                this.load(mod.name);
        });

        // Then load other modules
        this.installedModules.forEach(mod => {
            if (!this.isCoreModule(mod.name) && !this.isLoaded(mod.name))
                this.load(mod.name);
        });
    }

    unloadAll() {
        this.loadedModules.forEach(mod => this.unload(mod.name));
    }

    load(name, logInfo = true) {
        if (!this.clientInterface)
            return;

        let module = this.get(name);
        if (module)
            return module;

        const moduleInfo = this.getInfo(name);
        if (!moduleInfo) {
            console.error(mui.get('tera-client-interface/modulemanager/cannot-load-mod-not-installed', {name}));
        } else {
            try {
                module = new Module(this, moduleInfo);

                const BigIntJsonBefore = BigInt.prototype.toJSON;

                const moduleConstructor = require(moduleInfo.path);

                if (BigIntJsonBefore !== BigInt.prototype.toJSON) {
                    BigInt.prototype.toJSON = BigIntJsonBefore;
                    if (global.TeraProxy.DevMode)
                        console.log('[dev] You must not override BigInt.prototype.toJSON');
                    throw new Error("Forbidden module behavior.");
                }

                module.instance = new moduleConstructor(module);

                if (BigIntJsonBefore !== BigInt.prototype.toJSON) {
                    BigInt.prototype.toJSON = BigIntJsonBefore;
                    if (global.TeraProxy.DevMode)
                        console.log('[dev] You must not override BigInt.prototype.toJSON');
                    throw new Error("Forbidden module behavior.");
                }

                this.loadedModules.set(moduleInfo.name, module);

                if (logInfo)
                    console.log(mui.get('tera-client-interface/modulemanager/mod-loaded', {name: printableName(moduleInfo)}));
            } catch (e) {
                // Clear module files from require cache
                Object.keys(require.cache).forEach(key => {
                    if (key.startsWith(moduleInfo.path))
                        delete require.cache[key];
                });

                console.error(mui.get('tera-client-interface/modulemanager/mod-load-error-1', {name: printableName(moduleInfo)}));
                console.error(mui.get('tera-client-interface/modulemanager/mod-load-error-2', {supportUrl: moduleInfo.supportUrl || global.TeraProxy.SupportUrl}));
                console.error(e);
            }
        }

        return module;
    }

    unload(name, logInfo = true) {
        if (!this.clientInterface)
            return;

        const moduleInfo = this.getInfo(name);
        if (!moduleInfo) {
            console.error(mui.get('tera-client-interface/modulemanager/cannot-unload-mod-not-installed', {name}));
            return false;
        }

        let module = this.get(moduleInfo.name);
        if (!module) {
            console.error(mui.get('tera-client-interface/modulemanager/cannot-unload-mod-not-loaded', {name: printableName(moduleInfo)}));
            return false;
        }

        try {
            module.destructor();
            this.loadedModules.delete(moduleInfo.name);

            // Clear module files from require cache
            Object.keys(require.cache).forEach(key => {
                if (key.startsWith(moduleInfo.path))
                    delete require.cache[key];
            });

            if (logInfo)
                console.log(mui.get('tera-client-interface/modulemanager/mod-unloaded', {name: printableName(moduleInfo)}));
            return true;
        } catch (e) {
            console.error(mui.get('tera-client-interface/modulemanager/mod-unload-error-1', {name: printableName(moduleInfo)}));
            console.error(mui.get('tera-client-interface/modulemanager/mod-unload-error-2', {supportUrl: moduleInfo.supportUrl || global.TeraProxy.SupportUrl}));
            console.error(e);
            return false;
        }
    }
}

module.exports = ModuleManager;
